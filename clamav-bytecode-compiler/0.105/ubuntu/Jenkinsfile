properties([
    parameters([
        string(name: 'DOCKER_REGISTRY', defaultValue: 'registry.hub.docker.com',                                        description: 'The Docker registry to use'),
        string(name: 'REGISTRY_CREDS',  defaultValue: 'dockerhub',                                                      description: 'The Jenkins credentials ID for the given registry'),
        string(name: 'WEBEX_SPACE_ID',  defaultValue: 'b204c1a0-6862-11e8-9dbc-93ef3cfef186',                           description: 'ID of Webex space to push pass/fail notifications'),
        string(name: 'NAMESPACE',       defaultValue: 'clamav',                                                         description: 'The docker namespace to use'),
        string(name: 'IMAGE_NAME',      defaultValue: 'clambc-compiler',                                                description: 'The docker image name to use'),
        string(name: 'REPOSITORY',      defaultValue: 'https://github.com/Cisco-Talos/clamav-bytecode-compiler.git',    description: 'The repository from which to build'),
        string(name: 'BRANCH',          defaultValue: 'rel/0.105.0',                                                    description: 'The repository branch for this build'),
        string(name: 'FULL_VERSION',    defaultValue: '0.105.0',                                                        description: 'Full version in X.Y.Z format'),
        string(name: 'FEATURE_VERSION', defaultValue: '0.105',                                                          description: 'Feature version in X.Y format'),
        booleanParam(name: 'IS_LATEST', defaultValue: true,                                                             description: 'If "true", will also publish to :latest, and :stable tags.'),
    ]),
    disableConcurrentBuilds(),
    buildDiscarder(logRotator(
        artifactDaysToKeepStr: '10',
        artifactNumToKeepStr: '10',
        daysToKeepStr: '30',
        numToKeepStr: '20'))
])

node('docker') {
    cleanWs()

    try {
        // Checkout the ClamAV source code
        checkout([
            $class: 'GitSCM', branches: [[name: "${params.BRANCH}"]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [
                [$class: 'RelativeTargetDirectory', relativeTargetDir: '.'],
                [$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true]
            ],
            submoduleCfg: [], userRemoteConfigs: [[url: "${params.REPOSITORY}"]]
        ])

        // Remove the Dockerfile and scripts from the clamav repo, if any.
        sh """
        rm -rf ./Dockerfile
        """

        // Checkout the current repo
        dir(path: 'clamav-docker') {
            checkout scm
        }

        // Use the Dockerfile and scripts from this repo.
        sh """
        cp -r clamav-docker/clamav-bytecode-compiler/unstable/ubuntu/Dockerfile .
        """

        stage('Build Image') {
            withVault([vaultSecrets: [[ path: "clamavbuild-kv/${params.REGISTRY_CREDS}", engineVersion: 1, secretValues:
                [[envVar: 'DOCKER_USER', vaultKey: 'username'],[envVar: 'DOCKER_PASSWD', vaultKey: 'password']]]]]) {

                // Make sure we have the latest base image.
                sh """
                docker pull ubuntu:20.04
                """

                // Login to docker hub
                sh """
                echo "\${_passwd:-\${DOCKER_PASSWD}}" | \
                    docker login --password-stdin --username "${DOCKER_USER}" "${params.DOCKER_REGISTRY}"
                """

                //
                // Build X.Y.Z-R, X.Y.Z, and X.Y tags.
                // And maybe also the 'latest' and 'stable' images.
                //

                // Build X.Y.Z-R image
                sh """
                docker build --no-cache --tag "${params.IMAGE_NAME}:${params.FULL_VERSION}-${BUILD_NUMBER}" .
                """

                // Publish X.Y.Z-R tag
                sh """
                docker image tag ${params.IMAGE_NAME}:${params.FULL_VERSION}-${BUILD_NUMBER} ${params.DOCKER_REGISTRY}/${params.NAMESPACE}/${params.IMAGE_NAME}:${params.FULL_VERSION}-${BUILD_NUMBER}
                docker image push ${params.DOCKER_REGISTRY}/${params.NAMESPACE}/${params.IMAGE_NAME}:${params.FULL_VERSION}-${BUILD_NUMBER}
                """

                // Publish X.Y.Z tag
                sh """
                docker image tag ${params.IMAGE_NAME}:${params.FULL_VERSION}-${BUILD_NUMBER} ${params.DOCKER_REGISTRY}/${params.NAMESPACE}/${params.IMAGE_NAME}:${params.FULL_VERSION}
                docker image push ${params.DOCKER_REGISTRY}/${params.NAMESPACE}/${params.IMAGE_NAME}:${params.FULL_VERSION}
                """

                // Publish X.Y tag
                sh """
                docker image tag ${params.IMAGE_NAME}:${params.FULL_VERSION}-${BUILD_NUMBER} ${params.DOCKER_REGISTRY}/${params.NAMESPACE}/${params.IMAGE_NAME}:${params.FEATURE_VERSION}
                docker image push ${params.DOCKER_REGISTRY}/${params.NAMESPACE}/${params.IMAGE_NAME}:${params.FEATURE_VERSION}
                """

                if (params.IS_LATEST) {
                    // Create & Publish 'stable' and 'latest' tags.
                    sh """
                    docker image tag ${params.IMAGE_NAME}:${params.FULL_VERSION}-${BUILD_NUMBER} ${params.DOCKER_REGISTRY}/${params.NAMESPACE}/${params.IMAGE_NAME}:stable
                    docker image push ${params.DOCKER_REGISTRY}/${params.NAMESPACE}/${params.IMAGE_NAME}:stable

                    docker image tag ${params.IMAGE_NAME}:${params.FULL_VERSION}-${BUILD_NUMBER} ${params.DOCKER_REGISTRY}/${params.NAMESPACE}/${params.IMAGE_NAME}:latest
                    docker image push ${params.DOCKER_REGISTRY}/${params.NAMESPACE}/${params.IMAGE_NAME}:latest
                    """
                }

                // log-out
                sh """
                docker logout "${params.DOCKER_REGISTRY}"
                """
            }
        }

    } catch(err) {
        // log-out, if required
        sh """
        docker logout "${params.DOCKER_REGISTRY}" || true
        """

        currentBuild.result = "FAILED"
        sparkSend(
            message: "Docker build of ${params.FULL_VERSION} from ${params.REPOSITORY} branch ${params.BRANCH} for ${params.NAMESPACE}/${params.IMAGE_NAME} [FAILED](${BUILD_URL})",
            spaceList: [[spaceName: "ClamAV Jenkins", spaceId: "${params.WEBEX_SPACE_ID}"]], credentialsId: 'clambuilder', messageType: 'markdown')
        throw err
    }

    sparkSend(
        message: "Docker build of ${params.FULL_VERSION} from ${params.REPOSITORY} branch ${params.BRANCH} for ${params.NAMESPACE}/${params.IMAGE_NAME} [PASSED](${BUILD_URL})",
        spaceList: [[spaceName: "ClamAV Jenkins", spaceId: "${params.WEBEX_SPACE_ID}"]], credentialsId: 'clambuilder', messageType: 'markdown')
}
