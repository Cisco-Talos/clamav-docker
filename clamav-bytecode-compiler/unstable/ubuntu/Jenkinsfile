properties([
    parameters([
        string(name: "DOCKER_USER", defaultValue: "micasnyd", description: "User account for Docker Hub"),
        string(name: "DOCKER_REGISTRY", defaultValue: "registry.hub.docker.com", description: "The Docker registry to use"),
        string(name: "REGISTRY_CREDS", defaultValue: "dockerhub", description: "The Jenkins credentials ID for the given registry"),
        string(name: 'REPOSITORY', defaultValue: 'https://github.com/Cisco-Talos/clamav-bytecode-compiler.git', description: 'The repository from which to build ClamAV Bytecode Compiler'),
        string(name: 'NAMESPACE', defaultValue: 'micasnyd', description: 'The docker namespace to use'),
        string(name: 'IMAGE_NAME', defaultValue: 'clambc-compiler', description: 'The docker image name to use'),
    ]),
    disableConcurrentBuilds(),
    buildDiscarder(logRotator(
        artifactDaysToKeepStr: '10',
        artifactNumToKeepStr: '10',
        daysToKeepStr: '30',
        numToKeepStr: '20'))
])

node('docker-arm64') {
    cleanWs()

    try {
        // Checkout the ClamAV source code
        checkout([
            $class: 'GitSCM', branches: [[name: "main"]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [
                [$class: 'RelativeTargetDirectory', relativeTargetDir: '.'],
                [$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true]
            ],
            submoduleCfg: [], userRemoteConfigs: [[url: "${params.REPOSITORY}"]]
        ])

        stage('Build Image') {
            withCredentials([usernamePassword(credentialsId: "${params.REGISTRY_CREDS}", usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWD')]) {
                // Make sure we have the latest base image.
                sh """
                docker pull alpine:latest
                """

                // Login to docker hub
                sh """
                echo "\${_passwd:-\${DOCKER_PASSWD}}" | \
                    docker login --password-stdin --username "${params.DOCKER_USER}" "${params.DOCKER_REGISTRY}"
                """

                //
                // Build 'unstable' image.
                //

                sh """
                docker build --tag "${params.IMAGE_NAME}:unstable" .

                # Make a tag with the registry name in it so we can push wherever
                docker image tag ${params.IMAGE_NAME}:unstable ${params.DOCKER_REGISTRY}/${params.NAMESPACE}/${params.IMAGE_NAME}:unstable

                # Push the image/tag
                docker image push ${params.DOCKER_REGISTRY}/${params.NAMESPACE}/${params.IMAGE_NAME}:unstable
                """
            }
        }

    } catch(err) {
        currentBuild.result = "FAILED"
        sparkSend(
            message: "Docker build from ${params.REPOSITORY} branch main for ${params.NAMESPACE}/${params.IMAGE_NAME} [FAILED](${BUILD_URL})",
            spaceList: [[spaceName: "ClamAV Jenkins", spaceId: "b204c1a0-6862-11e8-9dbc-93ef3cfef186"]], credentialsId: 'clambuilder', messageType: 'markdown')
        throw err
    }

    sparkSend(
        message: "Docker build from ${params.REPOSITORY} branch main for ${params.NAMESPACE}/${params.IMAGE_NAME} [PASSED](${BUILD_URL})",
        spaceList: [[spaceName: "ClamAV Jenkins", spaceId: "b204c1a0-6862-11e8-9dbc-93ef3cfef186"]], credentialsId: 'clambuilder', messageType: 'markdown')
}
