properties([
    parameters([
        string(name: 'DOCKER_REGISTRY', defaultValue: "registry.hub.docker.com",                    description: 'The Docker registry to use'),
        string(name: 'REGISTRY_CREDS',  defaultValue: "dockerhub",                                  description: 'The Jenkins credentials ID for the given registry'),
        string(name: 'WEBEX_SPACE_ID',  defaultValue: "b204c1a0-6862-11e8-9dbc-93ef3cfef186",       description: 'ID of Webex space to push pass/fail notifications'),
        string(name: 'NAMESPACE',       defaultValue: "clamav",                                     description: 'The docker namespace to use'),
        string(name: 'IMAGE_NAME',      defaultValue: "clamav",                                     description: 'The docker image name to use'),
        string(name: 'REPOSITORY',      defaultValue: "https://github.com/Cisco-Talos/clamav.git",  description: 'The repository from which to build'),
    ]),
    disableConcurrentBuilds(),
    buildDiscarder(logRotator(
        artifactDaysToKeepStr: '10',
        artifactNumToKeepStr: '10',
        daysToKeepStr: '30',
        numToKeepStr: '20'))
])

node('docker') {
    cleanWs()

    try {
        // Checkout the ClamAV source code
        checkout([
            $class: 'GitSCM', branches: [[name: "main"]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [
                [$class: 'RelativeTargetDirectory', relativeTargetDir: '.'],
                [$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true]
            ],
            submoduleCfg: [], userRemoteConfigs: [[url: "${params.REPOSITORY}"]]
        ])

        // Remove the Dockerfile and scripts from the clamav repo, if any.
        sh """
        rm -rf ./Dockerfile ./dockerfiles
        """

        // Checkout the current repo
        dir(path: 'clamav-docker') {
            checkout scm
        }

        // Use the Dockerfile and scripts from this repo.
        sh """
        cp -r clamav-docker/clamav/unstable/alpine/Dockerfile clamav-docker/clamav/unstable/alpine/scripts .
        """

        stage('Build Image') {
            withVault([vaultSecrets: [[ path: "clamavbuild-kv/${params.REGISTRY_CREDS}", engineVersion: 1, secretValues:
                        [[envVar: 'DOCKER_USER', vaultKey: 'username'],[envVar: 'DOCKER_PASSWD', vaultKey: 'password']]]]]) {
                // Make sure we have the latest base image.
                sh """
                docker pull alpine:latest
                """

                // Login to docker hub
                sh """
                echo "\${_passwd:-\${DOCKER_PASSWD}}" | \
                    docker login --password-stdin --username "${DOCKER_USER}" "${params.DOCKER_REGISTRY}"
                """

                //
                // Build 'unstable' and 'unstable_base' images.
                //

                sh """
                docker build --no-cache \
                    --sbom=true --provenance mode=max,builder-id=${BUILD_URL} \
                    --annotation org.opencontainers.image.url=${params.REPOSITORY} \
                    --annotation org.opencontainers.image.source=${params.REPOSITORY} \
                    --annotation org.opencontainers.image.version=${params.FULL_VERSION} \
                    --annotation org.opencontainers.image.ref.name=${params.BRANCH} \
                    --annotation org.opencontainers.image.created="\$(date -Iseconds)" \
                    --tag "${params.IMAGE_NAME}:unstable_base" --push .

                // Give it some time to add the new unstable_base image.
                // In past jobs, it didn't detect the new image until we re-ran this job. I suspect because it needed a little delay after pushing before pulling.
                sh """
                sleep 20
                """

                // Generate and push an image without the "_base" suffix that contains the databases.
                sh """
                DOCKER_REGISTRY="${params.DOCKER_REGISTRY}" \
                CLAMAV_DOCKER_IMAGE="${params.IMAGE_NAME}" \
                    ./scripts/update_db_image.sh -t unstable_base -n ${params.NAMESPACE}
                """

                // update_db_image.sh logged off from the registry for us. No need to do it manually.
            }
        }

    } catch(err) {
        // log-out, if required
        sh """
        docker logout "${params.DOCKER_REGISTRY}" || true
        """

        currentBuild.result = "FAILED"
        sparkSend(
            message: "Docker build from ${params.REPOSITORY} branch main for ${params.NAMESPACE}/${params.IMAGE_NAME} [FAILED](${BUILD_URL})",
            spaceList: [[spaceName: "ClamAV Jenkins", spaceId: "${params.WEBEX_SPACE_ID}"]], credentialsId: 'clambuilder', messageType: 'markdown')
        throw err
    }

    sparkSend(
        message: "Docker build from ${params.REPOSITORY} branch main for ${params.NAMESPACE}/${params.IMAGE_NAME} [PASSED](${BUILD_URL})",
        spaceList: [[spaceName: "ClamAV Jenkins", spaceId: "${params.WEBEX_SPACE_ID}"]], credentialsId: 'clambuilder', messageType: 'markdown')
}
